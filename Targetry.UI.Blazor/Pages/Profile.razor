@page "/Profile"
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<MudContainer Height="400px" Width="150%">
    <MudItem xs="12" sm="12" md="12">
        <MudPaper Elevation="2" Square="true">
            <MudCard>
                <MudCardHeader>
                <MudCardTitle>Profile of @surname </MudCardTitle>
                </MudCardHeader>
                <MudButton OnClick="GetClaimsPrincipalData">Get Claims</MudButton>
                <MudText Typo="Typo.body1" Class="mud-text-center">@authMessage</MudText>



                @if (claims.Count() > 0)
                {
                    @foreach (var claim in claims)
                    {
                        value = @claim.Value;
                        <MudTextField @bind-Value="@value" Label="@claim.Type" ReadOnly="false" Variant="Variant.Outlined" />
                    }
                }
            </MudCard>
        </MudPaper>
    </MudItem>
</MudContainer>



@code {
    private string? authMessage;
    private string? surname;
    private string? value;
    private string? role;
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            authMessage = $"{user.Identity.Name} is authenticated.";
            claims = user.Claims;
            surname = user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value;
            surname = user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value;
            role = user.FindFirst(c => c.Type == ClaimTypes.Role)?.Value;
        }
        else
        {
            authMessage = "The user is NOT authenticated.";
        }
    }
}